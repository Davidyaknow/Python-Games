# Solo Blackjack against Dealer.
# Current Patch 1.1
# Card game simulator.
# Updated and improved upon from theonline Udemy course solution guidelines to fully explain each turn's scenario.
# Prevent type/value errors.
# Improved input conditions by adding while loops to prevent crashes.
# Added Total Chip rollover to the next round feature to allow players to accumulate chips.
# Added replay feature to continue playing the game when the round is over.
# Added a game over feature so that once you reach 0 chips, the game is over. 
# Added a Start Over feature allowing player to start the game over with the default amount of chips granted to the player.
# Added the Blackjack Feature.
# Incorporated 4 Decks in a game Feature.

# Next Patch 1.2 to include:
# Added Multiplayer.
# Double Down Feature.


# We are beginning by importing this module to incorporate the random shuffling module to be used with the deck.
import random
# Attribute library.
suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')
ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')
values = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10,
         'Queen':10, 'King':10, 'Ace':11}
# Keeping this global variable for future uses.
playing = True


# Card Class
class Card:
    # Defining the card rank, suit, and values.
    def __init__(self,suit,rank):
        self.suit = suit
        self.rank = rank
    # A method will define how we want our card objects displayed.
    def __str__(self):
        return self.rank + " of " + self.suit


# Deck Class   
class Deck:

    def __init__(self):
        # Starting with an empty list.
        self.deck = [] 
        # Looping suits over ranks, creating 52 instances which we will use later to make the 52 cards in a deck.
        for suit in suits:
            for rank in ranks:
                # Creating 4 sets of each card to mimic real life casino playstyle.
                for cardset in range(4):
                    # Creating the card object. 
                    created_card = (Card(suit,rank))
                    self.deck.append(created_card)
    # The deck_comp will set up the order in which the cards are displayed in the self.deck list.        
    def __str__(self):
        deck_comp = " " # Starting with an empty string
        for card in self.deck:
            deck_comp += "\n"+ card.__str__()
        return "The deck has: " + deck_comp
    # This is where we imported random to untilize to shuffle method.
    def shuffle(self):
        random.shuffle(self.deck)
    # This is to remove a card from the main deck, in essence dealing cards out.    
    def deal(self):
        single_card = self.deck.pop()
        return single_card


# Hand Class
class Hand:
    def __init__(self):
        self.cards = []   # Start with an empty list of card in the hand.
        self.value = 0    # Hand starting value is 0 until we gain cards.
        self.aces = 0     # Keep track of wildcard aces.

    def add_card(self, card):
        # from Deck.deal() --> single Card(suit, rank).
        self.cards.append(card)
        self.value += values[card.rank]
    # Tracking Aces    
        if card.rank == "Ace":
            self.aces += 1

    def adjust_for_ace(self):
        # If total value is greater than 21, and you have an ace.
        # Then change the ace to 1 instead of 11.
        while self.value > 21 and self.aces > 0:
            self.value -= 10
            self.aces -= 1

    def blackjack_hand(self):
        # If the rank value of the first 2 cards in your hands = 21, then you have blackjack.
        return values[self.cards[0].rank] + values[self.cards[1].rank] == 21


# Chip Class
class Chips:

    def __init__(self, num):
        self.total = num  # This can be set to a default value or supplied by a user input.
        self.bet = 0

    def win_bet(self):
        self.total += self.bet # Normal win.

    def print_win_bet(self): # Printing normal win for display on the bottom of the screen.
        winnings = self.bet 
        return winnings 

    def win_bet_blackjack(self): # Blackjack win.
        self.total += (self.bet * 1.5)

    def print_win_bet_blackjack(self): # Printing blackjack win for display on the bottom of the screen.
        return self.bet * 1.5

    def lose_bet(self): # Printing normal loss.
        self.total -= self.bet

    def print_lose_bet(self): #Printing loss for display on the bottom of the screen.
        losses = (-(self.bet))
        return losses


def take_bet(chips):
    # While loop for taking in bets with the try, except, finally method to prevents value/type errors.
    while True:

        try:
            chips.bet = int(input("How many chips would you like to bet?: "))
        except: 
            print("Sorry please provide an integer!")
        else:
            if chips.bet > chips.total:
                print(f"Sorry, you do not have enough chips! You currently have: {chips.total} chips. ")
            else:
                break

def hit(deck, hand):
    # Adding a card from the deck to the hand one at a time.
    single_card = deck.deal()
    hand.add_card(single_card)
    hand.adjust_for_ace()

def hit_or_stand(deck, hand): 

    global playing # to control an upcoming while loop.
    # While loop to allowing user to draw a card from the deck or stand and pass the turn onto the dealer 
    # and prevents value/type errors from occurring. 
    while True:
        x = input("\nHit or Stand? Enter h or s: ")

        if x[0].lower() == "h": 
            hit(deck, hand)
        elif x[0].lower() == "s":
            print("Player Stands.\nNow it's the dealer's turn.")
            playing = False
        else: 
            print("Sorry, I did not understand. Please enter h or s only!")
            continue
        break
# Showing half of the dealer's cards; one hidden. To mimic real life blackjack scenarios.
def show_some(player,dealer): 
    print("\n Dealer's Hand:") 
    print("<Hidden Card>") # Hide first card in dealer's hand.
    print('' ,dealer.cards[1]) 
    print("\n Player's Hand:", *player.cards, sep='\n ')
# This function runs after show_some to mimic real life blackjack scenarios once all players have selected stand 
# and dealer flips over the face down card.
def show_all(player,dealer): 
    print("******************************************")
    print("Final Hand Results:")
    print("\n Dealer's Hand:", *dealer.cards, sep='\n ') 
    print(" Dealer's Hand =",dealer.value) 
    print("\n Player's Hand:", *player.cards, sep='\n ') 
    print(" Player's Hand =" ,player.value)
# Player goes over 21 and loses.
def player_busts(player, dealer, chips):
    print(f"\nPlayer Busts with {player_hand.value}! ")
    chips.lose_bet()
# Player beats the dealer in hand value.    
def player_wins(player, dealer, chips):
    print(f"\nPlayer Wins with {player_hand.value}!")
    chips.win_bet()
# Dealer goes over 21 and loses.    
def dealer_busts(player, dealer, chips):
    chips.win_bet()
    print(f"\nDealer Busts with {dealer_hand.value}!")
# Dealer beats player in hand value.    
def dealer_wins(player, dealer, chips):
    print(f"\nDealer Wins with {dealer_hand.value}!")
    chips.lose_bet()
# Player gets a blackjack.
def player_wins_blackjack(player, dealer, chips):
    print("Blackjack!")
    chips.win_bet_blackjack()
# Player and dealer tie in hand value. No one loses. 
def push(player,dealer):
    print(f"\nPlayer and Dealer PUSH with {player_hand.value}!")
# Continue playing the game.
def replay():

    choice = ""
    # While loop that allows the player to continue or quit the game and prevents value/type errors from occurring. 
    while choice != "Yes" or choice != "No":
        choice = input("Would you like to play again? Enter Yes or No: ").capitalize()

        if choice == "Yes".capitalize():
            print("Great! Let's begin!")
            break
        elif choice == "No".capitalize():
            print("Player decided to stop playing.")
            print("Thanks for playing!")
            return False
        else:
            pass
    return(choice)
# When player reaches 0 chips, they lose. Allows player to start the game over with the default amount of chips.
def start_over():

    choice = ""
    # While loop that allows the player to start over the game or quit the game and prevents value/type errors from occurring.
    while choice != "Yes" or choice != "No":
        choice = input("Would you like start over again? Enter Yes or No: ").capitalize()
        print("Please select Yes or No:")

        if choice == "Yes".capitalize():
            print("Great! Let's begin!")
            break
        elif choice == "No".capitalize():
            print("Player decided to stop playing.")
            print("Thanks for playing!")
            return False
        else:
            pass
    return(choice)


# Game Logic
# There are special cases for first_round. Such as first round player gets the defaulted amount of chips.
# first_round the game presents the opening statement to the player.
first_round = True

while True:
    # Print an opening statement.
    if first_round:
        print("Welcome to BlackJack!")
        print("Each player begins with 100 chips that carries over to the next round.")
    else:
        pass

    # Create and shuffle a new deal, dealing two cards to each player.
    deck = Deck()
    deck.shuffle()

    # Player's hand. Deal one card at a time.
    player_hand = Hand()
    player_hand.add_card(deck.deal())
    player_hand.add_card(deck.deal())

    # Dealer's hand. Deal one card at a time.
    dealer_hand = Hand()
    dealer_hand.add_card(deck.deal()) # Dealer's first card will remain hidden as predetermined in the show_some function.
    dealer_hand.add_card(deck.deal())


    # Set up the Player's Chips.
    if first_round:
        player_chips = Chips(100)
    else: 
        player_chips = Chips(player_chips.total)

    # Game Over
    if player_chips.total == 0:
        print("You have run out of chips.")
        if start_over() == "Yes":
            first_round = True 
            player_chips = Chips(100)
        else:
            break     

    # Prompt the Player for their bet.
    take_bet(player_chips)

    # Blackjack Win Condition
    if player_hand.blackjack_hand():
        player_chips.win_bet_blackjack()
        playing = False

    # Show cards (but keep one dealer card hidden).
    show_some(player_hand, dealer_hand)

    while playing:
        # Prompt for Player to Hit or Stand.
        hit_or_stand(deck, player_hand)
        if player_hand.value == 21: # Force players to stop hitting and immediately stand when they hit 21.
            break

        # Show cards(Keep one dealer card hidden).
        show_some(player_hand, dealer_hand)

        # If Player's hand exceeds 21, run player_busts() and break out of loop.
        if player_hand.value > 21:
            player_busts(player_hand, dealer_hand, player_chips)
            break

        # If player hasn't busted, play Dealer's hand until Dealer reaches the minimal value of 17.
    if player_hand.value <= 21:

        while dealer_hand.value <= 16:
            hit(deck, dealer_hand)
            if dealer_hand.value > 16:
                break

        # Show all cards
        show_all(player_hand, dealer_hand)

        # Run different winning scenarios.
        # Then print different win/loss amounts.
        if player_hand.blackjack_hand():
            print("Blackjack!")
            print(f"You've won {player_chips.print_win_bet_blackjack()} chips.") 
        elif dealer_hand.value > 21:
            dealer_busts(player_hand, dealer_hand, player_chips)
            print(f"You've won {player_chips.print_win_bet()} chips.")    
        elif dealer_hand.value > player_hand.value:
            dealer_wins(player_hand, dealer_hand, player_chips)
            print(f"You've lost {player_chips.print_lose_bet()} chips.")   
        elif dealer_hand.value < player_hand.value:
            player_wins(player_hand, dealer_hand, player_chips)
            print(f"You've won {player_chips.print_win_bet()} chips.") 
        else:     
            push(player_hand, dealer_hand)

    # Chip Total Count
    print(f"\nPlayer Total Chips: {player_chips.total}")

    # Ask to play again
    if replay():
        first_round = False
        playing = True
    else:
        break
